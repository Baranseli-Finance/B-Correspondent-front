/**
 * BCorrespondent. Tag (-). Commit (bb65df7)
 * BCorrespondent server api
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: fclaw007@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GapItemUnitStatus from './GapItemUnitStatus';

/**
 * The GapItemUnit model module.
 * @module model/GapItemUnit
 * @version 1.2.1
 */
class GapItemUnit {
    /**
     * Constructs a new <code>GapItemUnit</code>.
     * @alias module:model/GapItemUnit
     * @param ident {Number} 
     * @param status {module:model/GapItemUnitStatus} 
     * @param textualIdent {String} 
     * @param tm {String} 
     */
    constructor(ident, status, textualIdent, tm) {

        GapItemUnit.initialize(this, ident, status, textualIdent, tm);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, ident, status, textualIdent, tm) {
        obj['ident'] = ident;
        obj['status'] = status;
        obj['textualIdent'] = textualIdent;
        obj['tm'] = tm;
    }

    /**
     * Constructs a <code>GapItemUnit</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GapItemUnit} obj Optional instance to populate.
     * @return {module:model/GapItemUnit} The populated <code>GapItemUnit</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GapItemUnit();

            if (data.hasOwnProperty('ident')) {
                obj['ident'] = ApiClient.convertToType(data['ident'], 'Number');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = GapItemUnitStatus.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('textualIdent')) {
                obj['textualIdent'] = ApiClient.convertToType(data['textualIdent'], 'String');
            }
            if (data.hasOwnProperty('tm')) {
                obj['tm'] = ApiClient.convertToType(data['tm'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GapItemUnit</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GapItemUnit</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of GapItemUnit.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['textualIdent'] && !(typeof data['textualIdent'] === 'string' || data['textualIdent'] instanceof String)) {
            throw new Error("Expected the field `textualIdent` to be a primitive type in the JSON string but got " + data['textualIdent']);
        }
        // ensure the json data is a string
        if (data['tm'] && !(typeof data['tm'] === 'string' || data['tm'] instanceof String)) {
            throw new Error("Expected the field `tm` to be a primitive type in the JSON string but got " + data['tm']);
        }

        return true;
    }

    /**
     * minimum: -9223372036854775808
     * maximum: 9223372036854775807
     * @return {Number}
     */
    getIdent() {
        return this.ident;
    }

    /**
     * @param {Number} ident
     */
    setIdent(ident) {
        this['ident'] = ident;
    }
    /**
     * @return {module:model/GapItemUnitStatus}
     */
    getStatus() {
        return this.status;
    }

    /**
     * @param {module:model/GapItemUnitStatus} status
     */
    setStatus(status) {
        this['status'] = status;
    }
    /**
     * @return {String}
     */
    getTextualIdent() {
        return this.textualIdent;
    }

    /**
     * @param {String} textualIdent
     */
    setTextualIdent(textualIdent) {
        this['textualIdent'] = textualIdent;
    }
    /**
     * @return {String}
     */
    getTm() {
        return this.tm;
    }

    /**
     * @param {String} tm
     */
    setTm(tm) {
        this['tm'] = tm;
    }

}

GapItemUnit.RequiredProperties = ["ident", "status", "textualIdent", "tm"];

/**
 * @member {Number} ident
 */
GapItemUnit.prototype['ident'] = undefined;

/**
 * @member {module:model/GapItemUnitStatus} status
 */
GapItemUnit.prototype['status'] = undefined;

/**
 * @member {String} textualIdent
 */
GapItemUnit.prototype['textualIdent'] = undefined;

/**
 * @member {String} tm
 */
GapItemUnit.prototype['tm'] = undefined;






export default GapItemUnit;