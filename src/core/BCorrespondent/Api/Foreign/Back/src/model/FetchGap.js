/**
 * BCorrespondent. Tag (-). Commit (bb65df7)
 * BCorrespondent server api
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: fclaw007@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GapItem from './GapItem';

/**
 * The FetchGap model module.
 * @module model/FetchGap
 * @version 1.2.1
 */
class FetchGap {
    /**
     * Constructs a new <code>FetchGap</code>.
     * @alias module:model/FetchGap
     * @param gap {module:model/GapItem} 
     */
    constructor(gap) {

        FetchGap.initialize(this, gap);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, gap) {
        obj['gap'] = gap;
    }

    /**
     * Constructs a <code>FetchGap</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FetchGap} obj Optional instance to populate.
     * @return {module:model/FetchGap} The populated <code>FetchGap</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FetchGap();

            if (data.hasOwnProperty('gap')) {
                obj['gap'] = GapItem.constructFromObject(data['gap']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FetchGap</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FetchGap</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of FetchGap.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `gap`
        if (data['gap']) { // data not null
            GapItem.validateJSON(data['gap']);
        }

        return true;
    }

    /**
     * @return {module:model/GapItem}
     */
    getGap() {
        return this.gap;
    }

    /**
     * @param {module:model/GapItem} gap
     */
    setGap(gap) {
        this['gap'] = gap;
    }

}

FetchGap.RequiredProperties = ["gap"];

/**
 * @member {module:model/GapItem} gap
 */
FetchGap.prototype['gap'] = undefined;






export default FetchGap;