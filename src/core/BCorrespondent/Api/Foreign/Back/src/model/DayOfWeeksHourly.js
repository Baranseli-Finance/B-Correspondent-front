/**
 * BCorrespondent. Tag (-). Commit (bb65df7)
 * BCorrespondent server api
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: fclaw007@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AmountInDayOfWeek from './AmountInDayOfWeek';
import DayOfWeeksHourlyTotalSum from './DayOfWeeksHourlyTotalSum';
import GapItemTime from './GapItemTime';

/**
 * The DayOfWeeksHourly model module.
 * @module model/DayOfWeeksHourly
 * @version 1.2.1
 */
class DayOfWeeksHourly {
    /**
     * Constructs a new <code>DayOfWeeksHourly</code>.
     * @alias module:model/DayOfWeeksHourly
     * @param amountInDayOfWeek {Array.<module:model/AmountInDayOfWeek>} 
     * @param from {module:model/GapItemTime} 
     * @param to {module:model/GapItemTime} 
     * @param total {Array.<module:model/DayOfWeeksHourlyTotalSum>} 
     */
    constructor(amountInDayOfWeek, from, to, total) {

        DayOfWeeksHourly.initialize(this, amountInDayOfWeek, from, to, total);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, amountInDayOfWeek, from, to, total) {
        obj['amountInDayOfWeek'] = amountInDayOfWeek;
        obj['from'] = from;
        obj['to'] = to;
        obj['total'] = total;
    }

    /**
     * Constructs a <code>DayOfWeeksHourly</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DayOfWeeksHourly} obj Optional instance to populate.
     * @return {module:model/DayOfWeeksHourly} The populated <code>DayOfWeeksHourly</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DayOfWeeksHourly();

            if (data.hasOwnProperty('amountInDayOfWeek')) {
                obj['amountInDayOfWeek'] = ApiClient.convertToType(data['amountInDayOfWeek'], [AmountInDayOfWeek]);
            }
            if (data.hasOwnProperty('from')) {
                obj['from'] = GapItemTime.constructFromObject(data['from']);
            }
            if (data.hasOwnProperty('to')) {
                obj['to'] = GapItemTime.constructFromObject(data['to']);
            }
            if (data.hasOwnProperty('total')) {
                obj['total'] = ApiClient.convertToType(data['total'], [DayOfWeeksHourlyTotalSum]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DayOfWeeksHourly</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DayOfWeeksHourly</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DayOfWeeksHourly.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['amountInDayOfWeek']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['amountInDayOfWeek'])) {
                throw new Error("Expected the field `amountInDayOfWeek` to be an array in the JSON data but got " + data['amountInDayOfWeek']);
            }
            // validate the optional field `amountInDayOfWeek` (array)
            for (const item of data['amountInDayOfWeek']) {
                AmountInDayOfWeek.validateJSON(item);
            };
        }
        // validate the optional field `from`
        if (data['from']) { // data not null
            GapItemTime.validateJSON(data['from']);
        }
        // validate the optional field `to`
        if (data['to']) { // data not null
            GapItemTime.validateJSON(data['to']);
        }
        if (data['total']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['total'])) {
                throw new Error("Expected the field `total` to be an array in the JSON data but got " + data['total']);
            }
            // validate the optional field `total` (array)
            for (const item of data['total']) {
                DayOfWeeksHourlyTotalSum.validateJSON(item);
            };
        }

        return true;
    }

    /**
     * @return {Array.<module:model/AmountInDayOfWeek>}
     */
    getAmountInDayOfWeek() {
        return this.amountInDayOfWeek;
    }

    /**
     * @param {Array.<module:model/AmountInDayOfWeek>} amountInDayOfWeek
     */
    setAmountInDayOfWeek(amountInDayOfWeek) {
        this['amountInDayOfWeek'] = amountInDayOfWeek;
    }
    /**
     * @return {module:model/GapItemTime}
     */
    getFrom() {
        return this.from;
    }

    /**
     * @param {module:model/GapItemTime} from
     */
    setFrom(from) {
        this['from'] = from;
    }
    /**
     * @return {module:model/GapItemTime}
     */
    getTo() {
        return this.to;
    }

    /**
     * @param {module:model/GapItemTime} to
     */
    setTo(to) {
        this['to'] = to;
    }
    /**
     * @return {Array.<module:model/DayOfWeeksHourlyTotalSum>}
     */
    getTotal() {
        return this.total;
    }

    /**
     * @param {Array.<module:model/DayOfWeeksHourlyTotalSum>} total
     */
    setTotal(total) {
        this['total'] = total;
    }

}

DayOfWeeksHourly.RequiredProperties = ["amountInDayOfWeek", "from", "to", "total"];

/**
 * @member {Array.<module:model/AmountInDayOfWeek>} amountInDayOfWeek
 */
DayOfWeeksHourly.prototype['amountInDayOfWeek'] = undefined;

/**
 * @member {module:model/GapItemTime} from
 */
DayOfWeeksHourly.prototype['from'] = undefined;

/**
 * @member {module:model/GapItemTime} to
 */
DayOfWeeksHourly.prototype['to'] = undefined;

/**
 * @member {Array.<module:model/DayOfWeeksHourlyTotalSum>} total
 */
DayOfWeeksHourly.prototype['total'] = undefined;






export default DayOfWeeksHourly;