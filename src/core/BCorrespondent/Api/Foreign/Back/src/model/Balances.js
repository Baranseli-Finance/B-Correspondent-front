/**
 * BCorrespondent. Tag (v1.1.0). Commit (46383a7)
 * BCorrespondent server api
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: fclaw007@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Balance from './Balance';

/**
 * The Balances model module.
 * @module model/Balances
 * @version 1.1.0
 */
class Balances {
    /**
     * Constructs a new <code>Balances</code>.
     * @alias module:model/Balances
     * @param xs {Array.<module:model/Balance>} 
     */
    constructor(xs) {

        Balances.initialize(this, xs);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, xs) {
        obj['xs'] = xs;
    }

    /**
     * Constructs a <code>Balances</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Balances} obj Optional instance to populate.
     * @return {module:model/Balances} The populated <code>Balances</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Balances();

            if (data.hasOwnProperty('xs')) {
                obj['xs'] = ApiClient.convertToType(data['xs'], [Balance]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Balances</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Balances</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Balances.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['xs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['xs'])) {
                throw new Error("Expected the field `xs` to be an array in the JSON data but got " + data['xs']);
            }
            // validate the optional field `xs` (array)
            for (const item of data['xs']) {
                Balance.validateJSON(item);
            };
        }

        return true;
    }

    /**
     * @return {Array.<module:model/Balance>}
     */
    getXs() {
        return this.xs;
    }

    /**
     * @param {Array.<module:model/Balance>} xs
     */
    setXs(xs) {
        this['xs'] = xs;
    }

}

Balances.RequiredProperties = ["xs"];

/**
 * @member {Array.<module:model/Balance>} xs
 */
Balances.prototype['xs'] = undefined;






export default Balances;