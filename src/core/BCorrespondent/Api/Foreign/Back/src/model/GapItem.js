/**
 * BCorrespondent. Tag (-). Commit (bb65df7)
 * BCorrespondent server api
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: fclaw007@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GapItemAmount from './GapItemAmount';
import GapItemTime from './GapItemTime';
import GapItemUnit from './GapItemUnit';

/**
 * The GapItem model module.
 * @module model/GapItem
 * @version 1.2.1
 */
class GapItem {
    /**
     * Constructs a new <code>GapItem</code>.
     * @alias module:model/GapItem
     * @param amounts {Array.<module:model/GapItemAmount>} 
     * @param elements {Array.<module:model/GapItemUnit>} 
     * @param end {module:model/GapItemTime} 
     * @param start {module:model/GapItemTime} 
     */
    constructor(amounts, elements, end, start) {

        GapItem.initialize(this, amounts, elements, end, start);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, amounts, elements, end, start) {
        obj['amounts'] = amounts;
        obj['elements'] = elements;
        obj['end'] = end;
        obj['start'] = start;
    }

    /**
     * Constructs a <code>GapItem</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GapItem} obj Optional instance to populate.
     * @return {module:model/GapItem} The populated <code>GapItem</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GapItem();

            if (data.hasOwnProperty('amounts')) {
                obj['amounts'] = ApiClient.convertToType(data['amounts'], [GapItemAmount]);
            }
            if (data.hasOwnProperty('elements')) {
                obj['elements'] = ApiClient.convertToType(data['elements'], [GapItemUnit]);
            }
            if (data.hasOwnProperty('end')) {
                obj['end'] = GapItemTime.constructFromObject(data['end']);
            }
            if (data.hasOwnProperty('start')) {
                obj['start'] = GapItemTime.constructFromObject(data['start']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GapItem</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GapItem</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of GapItem.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['amounts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['amounts'])) {
                throw new Error("Expected the field `amounts` to be an array in the JSON data but got " + data['amounts']);
            }
            // validate the optional field `amounts` (array)
            for (const item of data['amounts']) {
                GapItemAmount.validateJSON(item);
            };
        }
        if (data['elements']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['elements'])) {
                throw new Error("Expected the field `elements` to be an array in the JSON data but got " + data['elements']);
            }
            // validate the optional field `elements` (array)
            for (const item of data['elements']) {
                GapItemUnit.validateJSON(item);
            };
        }
        // validate the optional field `end`
        if (data['end']) { // data not null
            GapItemTime.validateJSON(data['end']);
        }
        // validate the optional field `start`
        if (data['start']) { // data not null
            GapItemTime.validateJSON(data['start']);
        }

        return true;
    }

    /**
     * @return {Array.<module:model/GapItemAmount>}
     */
    getAmounts() {
        return this.amounts;
    }

    /**
     * @param {Array.<module:model/GapItemAmount>} amounts
     */
    setAmounts(amounts) {
        this['amounts'] = amounts;
    }
    /**
     * @return {Array.<module:model/GapItemUnit>}
     */
    getElements() {
        return this.elements;
    }

    /**
     * @param {Array.<module:model/GapItemUnit>} elements
     */
    setElements(elements) {
        this['elements'] = elements;
    }
    /**
     * @return {module:model/GapItemTime}
     */
    getEnd() {
        return this.end;
    }

    /**
     * @param {module:model/GapItemTime} end
     */
    setEnd(end) {
        this['end'] = end;
    }
    /**
     * @return {module:model/GapItemTime}
     */
    getStart() {
        return this.start;
    }

    /**
     * @param {module:model/GapItemTime} start
     */
    setStart(start) {
        this['start'] = start;
    }

}

GapItem.RequiredProperties = ["amounts", "elements", "end", "start"];

/**
 * @member {Array.<module:model/GapItemAmount>} amounts
 */
GapItem.prototype['amounts'] = undefined;

/**
 * @member {Array.<module:model/GapItemUnit>} elements
 */
GapItem.prototype['elements'] = undefined;

/**
 * @member {module:model/GapItemTime} end
 */
GapItem.prototype['end'] = undefined;

/**
 * @member {module:model/GapItemTime} start
 */
GapItem.prototype['start'] = undefined;






export default GapItem;