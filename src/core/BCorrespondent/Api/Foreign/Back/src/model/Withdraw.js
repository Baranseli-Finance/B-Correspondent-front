/**
 * BCorrespondent. Tag (-). Commit (bb65df7)
 * BCorrespondent server api
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: fclaw007@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Withdraw model module.
 * @module model/Withdraw
 * @version 1.2.1
 */
class Withdraw {
    /**
     * Constructs a new <code>Withdraw</code>.
     * @alias module:model/Withdraw
     * @param amount {Number} 
     * @param walletIdent {Number} 
     */
    constructor(amount, walletIdent) {

        Withdraw.initialize(this, amount, walletIdent);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, amount, walletIdent) {
        obj['amount'] = amount;
        obj['walletIdent'] = walletIdent;
    }

    /**
     * Constructs a <code>Withdraw</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Withdraw} obj Optional instance to populate.
     * @return {module:model/Withdraw} The populated <code>Withdraw</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Withdraw();

            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'Number');
            }
            if (data.hasOwnProperty('walletIdent')) {
                obj['walletIdent'] = ApiClient.convertToType(data['walletIdent'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Withdraw</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Withdraw</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Withdraw.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }

        return true;
    }

    /**
     * @return {Number}
     */
    getAmount() {
        return this.amount;
    }

    /**
     * @param {Number} amount
     */
    setAmount(amount) {
        this['amount'] = amount;
    }
    /**
     * minimum: -9223372036854775808
     * maximum: 9223372036854775807
     * @return {Number}
     */
    getWalletIdent() {
        return this.walletIdent;
    }

    /**
     * @param {Number} walletIdent
     */
    setWalletIdent(walletIdent) {
        this['walletIdent'] = walletIdent;
    }

}

Withdraw.RequiredProperties = ["amount", "walletIdent"];

/**
 * @member {Number} amount
 */
Withdraw.prototype['amount'] = undefined;

/**
 * @member {Number} walletIdent
 */
Withdraw.prototype['walletIdent'] = undefined;






export default Withdraw;