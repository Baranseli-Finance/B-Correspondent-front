/**
 * BCorrespondent. Tag (-). Commit (bb65df7)
 * BCorrespondent server api
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: fclaw007@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ResendCode model module.
 * @module model/ResendCode
 * @version 1.2.1
 */
class ResendCode {
    /**
     * Constructs a new <code>ResendCode</code>.
     * @alias module:model/ResendCode
     * @param browserFp {String} 
     * @param hash {String} 
     */
    constructor(browserFp, hash) {

        ResendCode.initialize(this, browserFp, hash);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, browserFp, hash) {
        obj['browserFp'] = browserFp;
        obj['hash'] = hash;
    }

    /**
     * Constructs a <code>ResendCode</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ResendCode} obj Optional instance to populate.
     * @return {module:model/ResendCode} The populated <code>ResendCode</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ResendCode();

            if (data.hasOwnProperty('browserFp')) {
                obj['browserFp'] = ApiClient.convertToType(data['browserFp'], 'String');
            }
            if (data.hasOwnProperty('hash')) {
                obj['hash'] = ApiClient.convertToType(data['hash'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ResendCode</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ResendCode</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ResendCode.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['browserFp'] && !(typeof data['browserFp'] === 'string' || data['browserFp'] instanceof String)) {
            throw new Error("Expected the field `browserFp` to be a primitive type in the JSON string but got " + data['browserFp']);
        }
        // ensure the json data is a string
        if (data['hash'] && !(typeof data['hash'] === 'string' || data['hash'] instanceof String)) {
            throw new Error("Expected the field `hash` to be a primitive type in the JSON string but got " + data['hash']);
        }

        return true;
    }

    /**
     * @return {String}
     */
    getBrowserFp() {
        return this.browserFp;
    }

    /**
     * @param {String} browserFp
     */
    setBrowserFp(browserFp) {
        this['browserFp'] = browserFp;
    }
    /**
     * @return {String}
     */
    getHash() {
        return this.hash;
    }

    /**
     * @param {String} hash
     */
    setHash(hash) {
        this['hash'] = hash;
    }

}

ResendCode.RequiredProperties = ["browserFp", "hash"];

/**
 * @member {String} browserFp
 */
ResendCode.prototype['browserFp'] = undefined;

/**
 * @member {String} hash
 */
ResendCode.prototype['hash'] = undefined;






export default ResendCode;