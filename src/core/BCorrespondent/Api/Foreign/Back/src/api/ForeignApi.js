/**
 * BCorrespondent. Tag (-). Commit (bb65df7)
 * BCorrespondent server api
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: fclaw007@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Response from '../model/Response';
import SendGridSendMailRequest from '../model/SendGridSendMailRequest';

/**
 * Foreign service.
 * @module api/ForeignApi
 * @version 1.2.1
 */
export default class ForeignApi {

    /**
     * Constructs a new ForeignApi. 
     * @alias module:api/ForeignApi
     * @class
     * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
     * default to {@link module:ApiClient#instance} if unspecified.
     */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * BCorrespondent api
     * @param {module:model/SendGridSendMailRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Response} and HTTP response
     */
    foreignSendgridSendPostWithHttpInfo(body) {
        let postBody = body;
        // verify the required parameter 'body' is set
        if (body === undefined || body === null) {
            throw new Error("Missing the required parameter 'body' when calling foreignSendgridSendPost");
        }

        let pathParams = {};
        let queryParams = {};
        let headerParams = {};
        let formParams = {};

        let authNames = [];
        let contentTypes = ['application/json;charset=utf-8'];
        let accepts = ['application/json;charset=utf-8'];
        let returnType = Response;
        return this.apiClient.callApi(
            '/foreign/sendgrid/send', 'POST',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, null
        );
    }

    /**
     * BCorrespondent api
     * @param {module:model/SendGridSendMailRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Response}
     */
    foreignSendgridSendPost(body) {
        return this.foreignSendgridSendPostWithHttpInfo(body)
            .then(function(response_and_data) {
                return response_and_data.data;
            });
    }


    /**
     * BCorrespondent api
     * @param {Object.<String, Object>} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Response} and HTTP response
     */
    foreignWebhookGithubPostWithHttpInfo(body) {
        let postBody = body;
        // verify the required parameter 'body' is set
        if (body === undefined || body === null) {
            throw new Error("Missing the required parameter 'body' when calling foreignWebhookGithubPost");
        }

        let pathParams = {};
        let queryParams = {};
        let headerParams = {};
        let formParams = {};

        let authNames = [];
        let contentTypes = ['application/json;charset=utf-8'];
        let accepts = ['application/json;charset=utf-8'];
        let returnType = Response;
        return this.apiClient.callApi(
            '/foreign/webhook/github', 'POST',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, null
        );
    }

    /**
     * BCorrespondent api
     * @param {Object.<String, Object>} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Response}
     */
    foreignWebhookGithubPost(body) {
        return this.foreignWebhookGithubPostWithHttpInfo(body)
            .then(function(response_and_data) {
                return response_and_data.data;
            });
    }


    /**
     * BCorrespondent api
     * @param {module:model/String} provider 
     * @param {Object.<String, Object>} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Response} and HTTP response
     */
    foreignWebhookProviderPostWithHttpInfo(provider, body) {
        let postBody = body;
        // verify the required parameter 'provider' is set
        if (provider === undefined || provider === null) {
            throw new Error("Missing the required parameter 'provider' when calling foreignWebhookProviderPost");
        }
        // verify the required parameter 'body' is set
        if (body === undefined || body === null) {
            throw new Error("Missing the required parameter 'body' when calling foreignWebhookProviderPost");
        }

        let pathParams = {
            'provider': provider
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};

        let authNames = [];
        let contentTypes = ['application/json;charset=utf-8'];
        let accepts = ['application/json;charset=utf-8'];
        let returnType = Response;
        return this.apiClient.callApi(
            '/foreign/webhook/{provider}', 'POST',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, null
        );
    }

    /**
     * BCorrespondent api
     * @param {module:model/String} provider 
     * @param {Object.<String, Object>} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Response}
     */
    foreignWebhookProviderPost(provider, body) {
        return this.foreignWebhookProviderPostWithHttpInfo(provider, body)
            .then(function(response_and_data) {
                return response_and_data.data;
            });
    }


}