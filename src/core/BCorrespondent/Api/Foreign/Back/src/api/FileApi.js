/**
 * BCorrespondent. Tag (-). Commit (bb65df7)
 * BCorrespondent server api
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: fclaw007@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ResponseIdFile from '../model/ResponseIdFile';

/**
 * File service.
 * @module api/FileApi
 * @version 1.2.1
 */
export default class FileApi {

    /**
     * Constructs a new FileApi. 
     * @alias module:api/FileApi
     * @class
     * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
     * default to {@link module:ApiClient#instance} if unspecified.
     */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * BCorrespondent apiupload to server
     * @param {String} bucket 
     * @param {Number} payloadFiles 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ResponseIdFile} and HTTP response
     */
    fileUploadBucketPutWithHttpInfo(bucket, payloadFiles) {
        let postBody = null;
        // verify the required parameter 'bucket' is set
        if (bucket === undefined || bucket === null) {
            throw new Error("Missing the required parameter 'bucket' when calling fileUploadBucketPut");
        }
        // verify the required parameter 'payloadFiles' is set
        if (payloadFiles === undefined || payloadFiles === null) {
            throw new Error("Missing the required parameter 'payloadFiles' when calling fileUploadBucketPut");
        }

        let pathParams = {
            'bucket': bucket
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {
            'payloadFiles': payloadFiles
        };

        let authNames = ['JwtSecurity'];
        let contentTypes = ['multipart/form-data'];
        let accepts = ['application/json;charset=utf-8'];
        let returnType = ResponseIdFile;
        return this.apiClient.callApi(
            '/file/upload/{bucket}', 'PUT',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, null
        );
    }

    /**
     * BCorrespondent apiupload to server
     * @param {String} bucket 
     * @param {Number} payloadFiles 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ResponseIdFile}
     */
    fileUploadBucketPut(bucket, payloadFiles) {
        return this.fileUploadBucketPutWithHttpInfo(bucket, payloadFiles)
            .then(function(response_and_data) {
                return response_and_data.data;
            });
    }


}