/**
 * BCorrespondent. Tag (-). Commit (bb65df7)
 * BCorrespondent server api
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: fclaw007@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Issue from '../model/Issue';
import ProcuratoryRequest from '../model/ProcuratoryRequest';
import Response from '../model/Response';
import ResponseBalancedBook from '../model/ResponseBalancedBook';
import ResponseFetchGap from '../model/ResponseFetchGap';
import ResponseGapItemWrapper from '../model/ResponseGapItemWrapper';
import ResponseHistoryTimeline from '../model/ResponseHistoryTimeline';
import ResponseInit from '../model/ResponseInit';
import ResponseInitDashboard from '../model/ResponseInitDashboard';
import ResponseNotifications from '../model/ResponseNotifications';
import ResponseTimelineTransactionResponse from '../model/ResponseTimelineTransactionResponse';
import ResponseWorkspace from '../model/ResponseWorkspace';

/**
 * Frontend service.
 * @module api/FrontendApi
 * @version 1.2.1
 */
export default class FrontendApi {

    /**
     * Constructs a new FrontendApi. 
     * @alias module:api/FrontendApi
     * @class
     * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
     * default to {@link module:ApiClient#instance} if unspecified.
     */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * BCorrespondent api
     * @param {Object} opts Optional parameters
     * @param {String} [token] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ResponseInit} and HTTP response
     */
    frontendInitGetWithHttpInfo(opts) {
        opts = opts || {};
        let postBody = null;

        let pathParams = {};
        let queryParams = {
            'token': opts['token']
        };
        let headerParams = {};
        let formParams = {};

        let authNames = [];
        let contentTypes = [];
        let accepts = ['application/json;charset=utf-8'];
        let returnType = ResponseInit;
        return this.apiClient.callApi(
            '/frontend/init', 'GET',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, null
        );
    }

    /**
     * BCorrespondent api
     * @param {Object} opts Optional parameters
     * @param {String} opts.token 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ResponseInit}
     */
    frontendInitGet(opts) {
        return this.frontendInitGetWithHttpInfo(opts)
            .then(function(response_and_data) {
                return response_and_data.data;
            });
    }


    /**
     * BCorrespondent api
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ResponseBalancedBook} and HTTP response
     */
    frontendUserBalancedBookGetWithHttpInfo() {
        let postBody = null;

        let pathParams = {};
        let queryParams = {};
        let headerParams = {};
        let formParams = {};

        let authNames = ['JwtSecurity'];
        let contentTypes = [];
        let accepts = ['application/json;charset=utf-8'];
        let returnType = ResponseBalancedBook;
        return this.apiClient.callApi(
            '/frontend/user/balanced-book', 'GET',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, null
        );
    }

    /**
     * BCorrespondent api
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ResponseBalancedBook}
     */
    frontendUserBalancedBookGet() {
        return this.frontendUserBalancedBookGetWithHttpInfo()
            .then(function(response_and_data) {
                return response_and_data.data;
            });
    }


    /**
     * BCorrespondent api
     * @param {Number} year 
     * @param {Number} month 
     * @param {Number} day 
     * @param {module:model/String} direction 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ResponseBalancedBook} and HTTP response
     */
    frontendUserBalancedBookYearMonthDayDirectionGetWithHttpInfo(year, month, day, direction) {
        let postBody = null;
        // verify the required parameter 'year' is set
        if (year === undefined || year === null) {
            throw new Error("Missing the required parameter 'year' when calling frontendUserBalancedBookYearMonthDayDirectionGet");
        }
        // verify the required parameter 'month' is set
        if (month === undefined || month === null) {
            throw new Error("Missing the required parameter 'month' when calling frontendUserBalancedBookYearMonthDayDirectionGet");
        }
        // verify the required parameter 'day' is set
        if (day === undefined || day === null) {
            throw new Error("Missing the required parameter 'day' when calling frontendUserBalancedBookYearMonthDayDirectionGet");
        }
        // verify the required parameter 'direction' is set
        if (direction === undefined || direction === null) {
            throw new Error("Missing the required parameter 'direction' when calling frontendUserBalancedBookYearMonthDayDirectionGet");
        }

        let pathParams = {
            'year': year,
            'month': month,
            'day': day,
            'direction': direction
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};

        let authNames = ['JwtSecurity'];
        let contentTypes = [];
        let accepts = ['application/json;charset=utf-8'];
        let returnType = ResponseBalancedBook;
        return this.apiClient.callApi(
            '/frontend/user/balanced-book/{year}/{month}/{day}/{direction}', 'GET',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, null
        );
    }

    /**
     * BCorrespondent api
     * @param {Number} year 
     * @param {Number} month 
     * @param {Number} day 
     * @param {module:model/String} direction 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ResponseBalancedBook}
     */
    frontendUserBalancedBookYearMonthDayDirectionGet(year, month, day, direction) {
        return this.frontendUserBalancedBookYearMonthDayDirectionGetWithHttpInfo(year, month, day, direction)
            .then(function(response_and_data) {
                return response_and_data.data;
            });
    }


    /**
     * BCorrespondent api
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ResponseInitDashboard} and HTTP response
     */
    frontendUserDashboardInitGetWithHttpInfo() {
        let postBody = null;

        let pathParams = {};
        let queryParams = {};
        let headerParams = {};
        let formParams = {};

        let authNames = ['JwtSecurity'];
        let contentTypes = [];
        let accepts = ['application/json;charset=utf-8'];
        let returnType = ResponseInitDashboard;
        return this.apiClient.callApi(
            '/frontend/user/dashboard/init', 'GET',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, null
        );
    }

    /**
     * BCorrespondent api
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ResponseInitDashboard}
     */
    frontendUserDashboardInitGet() {
        return this.frontendUserDashboardInitGetWithHttpInfo()
            .then(function(response_and_data) {
                return response_and_data.data;
            });
    }


    /**
     * BCorrespondent api
     * @param {module:model/String} direction 
     * @param {String} point 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ResponseGapItemWrapper} and HTTP response
     */
    frontendUserDashboardTimelineDirectionGetWithHttpInfo(direction, point) {
        let postBody = null;
        // verify the required parameter 'direction' is set
        if (direction === undefined || direction === null) {
            throw new Error("Missing the required parameter 'direction' when calling frontendUserDashboardTimelineDirectionGet");
        }
        // verify the required parameter 'point' is set
        if (point === undefined || point === null) {
            throw new Error("Missing the required parameter 'point' when calling frontendUserDashboardTimelineDirectionGet");
        }

        let pathParams = {
            'direction': direction
        };
        let queryParams = {
            'point': point
        };
        let headerParams = {};
        let formParams = {};

        let authNames = ['JwtSecurity'];
        let contentTypes = [];
        let accepts = ['application/json;charset=utf-8'];
        let returnType = ResponseGapItemWrapper;
        return this.apiClient.callApi(
            '/frontend/user/dashboard/timeline/{direction}', 'GET',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, null
        );
    }

    /**
     * BCorrespondent api
     * @param {module:model/String} direction 
     * @param {String} point 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ResponseGapItemWrapper}
     */
    frontendUserDashboardTimelineDirectionGet(direction, point) {
        return this.frontendUserDashboardTimelineDirectionGetWithHttpInfo(direction, point)
            .then(function(response_and_data) {
                return response_and_data.data;
            });
    }


    /**
     * BCorrespondent api
     * @param {String} from 
     * @param {String} to 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ResponseFetchGap} and HTTP response
     */
    frontendUserDashboardTimelineGapGetWithHttpInfo(from, to) {
        let postBody = null;
        // verify the required parameter 'from' is set
        if (from === undefined || from === null) {
            throw new Error("Missing the required parameter 'from' when calling frontendUserDashboardTimelineGapGet");
        }
        // verify the required parameter 'to' is set
        if (to === undefined || to === null) {
            throw new Error("Missing the required parameter 'to' when calling frontendUserDashboardTimelineGapGet");
        }

        let pathParams = {};
        let queryParams = {
            'from': from,
            'to': to
        };
        let headerParams = {};
        let formParams = {};

        let authNames = ['JwtSecurity'];
        let contentTypes = [];
        let accepts = ['application/json;charset=utf-8'];
        let returnType = ResponseFetchGap;
        return this.apiClient.callApi(
            '/frontend/user/dashboard/timeline/gap', 'GET',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, null
        );
    }

    /**
     * BCorrespondent api
     * @param {String} from 
     * @param {String} to 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ResponseFetchGap}
     */
    frontendUserDashboardTimelineGapGet(from, to) {
        return this.frontendUserDashboardTimelineGapGetWithHttpInfo(from, to)
            .then(function(response_and_data) {
                return response_and_data.data;
            });
    }


    /**
     * BCorrespondent api
     * @param {Number} ident 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ResponseTimelineTransactionResponse} and HTTP response
     */
    frontendUserDashboardTimelineTransactionIdentGetWithHttpInfo(ident) {
        let postBody = null;
        // verify the required parameter 'ident' is set
        if (ident === undefined || ident === null) {
            throw new Error("Missing the required parameter 'ident' when calling frontendUserDashboardTimelineTransactionIdentGet");
        }

        let pathParams = {
            'ident': ident
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};

        let authNames = ['JwtSecurity'];
        let contentTypes = [];
        let accepts = ['application/json;charset=utf-8'];
        let returnType = ResponseTimelineTransactionResponse;
        return this.apiClient.callApi(
            '/frontend/user/dashboard/timeline/transaction/{ident}', 'GET',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, null
        );
    }

    /**
     * BCorrespondent api
     * @param {Number} ident 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ResponseTimelineTransactionResponse}
     */
    frontendUserDashboardTimelineTransactionIdentGet(ident) {
        return this.frontendUserDashboardTimelineTransactionIdentGetWithHttpInfo(ident)
            .then(function(response_and_data) {
                return response_and_data.data;
            });
    }


    /**
     * BCorrespondent api
     * @param {String} date 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ResponseHistoryTimeline} and HTTP response
     */
    frontendUserHistoryTimelineGetWithHttpInfo(date) {
        let postBody = null;
        // verify the required parameter 'date' is set
        if (date === undefined || date === null) {
            throw new Error("Missing the required parameter 'date' when calling frontendUserHistoryTimelineGet");
        }

        let pathParams = {};
        let queryParams = {
            'date': date
        };
        let headerParams = {};
        let formParams = {};

        let authNames = ['JwtSecurity'];
        let contentTypes = [];
        let accepts = ['application/json;charset=utf-8'];
        let returnType = ResponseHistoryTimeline;
        return this.apiClient.callApi(
            '/frontend/user/history/timeline', 'GET',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, null
        );
    }

    /**
     * BCorrespondent api
     * @param {String} date 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ResponseHistoryTimeline}
     */
    frontendUserHistoryTimelineGet(date) {
        return this.frontendUserHistoryTimelineGetWithHttpInfo(date)
            .then(function(response_and_data) {
                return response_and_data.data;
            });
    }


    /**
     * BCorrespondent api
     * @param {Number} year 
     * @param {Number} month 
     * @param {Number} day 
     * @param {module:model/String} direction 
     * @param {Number} institution 
     * @param {Number} hour 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ResponseGapItemWrapper} and HTTP response
     */
    frontendUserHistoryTimelineYearMonthDayDirectionInstitutionGetWithHttpInfo(year, month, day, direction, institution, hour) {
        let postBody = null;
        // verify the required parameter 'year' is set
        if (year === undefined || year === null) {
            throw new Error("Missing the required parameter 'year' when calling frontendUserHistoryTimelineYearMonthDayDirectionInstitutionGet");
        }
        // verify the required parameter 'month' is set
        if (month === undefined || month === null) {
            throw new Error("Missing the required parameter 'month' when calling frontendUserHistoryTimelineYearMonthDayDirectionInstitutionGet");
        }
        // verify the required parameter 'day' is set
        if (day === undefined || day === null) {
            throw new Error("Missing the required parameter 'day' when calling frontendUserHistoryTimelineYearMonthDayDirectionInstitutionGet");
        }
        // verify the required parameter 'direction' is set
        if (direction === undefined || direction === null) {
            throw new Error("Missing the required parameter 'direction' when calling frontendUserHistoryTimelineYearMonthDayDirectionInstitutionGet");
        }
        // verify the required parameter 'institution' is set
        if (institution === undefined || institution === null) {
            throw new Error("Missing the required parameter 'institution' when calling frontendUserHistoryTimelineYearMonthDayDirectionInstitutionGet");
        }
        // verify the required parameter 'hour' is set
        if (hour === undefined || hour === null) {
            throw new Error("Missing the required parameter 'hour' when calling frontendUserHistoryTimelineYearMonthDayDirectionInstitutionGet");
        }

        let pathParams = {
            'year': year,
            'month': month,
            'day': day,
            'direction': direction,
            'institution': institution
        };
        let queryParams = {
            'hour': hour
        };
        let headerParams = {};
        let formParams = {};

        let authNames = ['JwtSecurity'];
        let contentTypes = [];
        let accepts = ['application/json;charset=utf-8'];
        let returnType = ResponseGapItemWrapper;
        return this.apiClient.callApi(
            '/frontend/user/history/timeline/{year}/{month}/{day}/{direction}/{institution}', 'GET',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, null
        );
    }

    /**
     * BCorrespondent api
     * @param {Number} year 
     * @param {Number} month 
     * @param {Number} day 
     * @param {module:model/String} direction 
     * @param {Number} institution 
     * @param {Number} hour 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ResponseGapItemWrapper}
     */
    frontendUserHistoryTimelineYearMonthDayDirectionInstitutionGet(year, month, day, direction, institution, hour) {
        return this.frontendUserHistoryTimelineYearMonthDayDirectionInstitutionGetWithHttpInfo(year, month, day, direction, institution, hour)
            .then(function(response_and_data) {
                return response_and_data.data;
            });
    }


    /**
     * BCorrespondent api
     * @param {module:model/Issue} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Response} and HTTP response
     */
    frontendUserIssuePutWithHttpInfo(body) {
        let postBody = body;
        // verify the required parameter 'body' is set
        if (body === undefined || body === null) {
            throw new Error("Missing the required parameter 'body' when calling frontendUserIssuePut");
        }

        let pathParams = {};
        let queryParams = {};
        let headerParams = {};
        let formParams = {};

        let authNames = ['JwtSecurity'];
        let contentTypes = ['application/json;charset=utf-8'];
        let accepts = ['application/json;charset=utf-8'];
        let returnType = Response;
        return this.apiClient.callApi(
            '/frontend/user/issue', 'PUT',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, null
        );
    }

    /**
     * BCorrespondent api
     * @param {module:model/Issue} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Response}
     */
    frontendUserIssuePut(body) {
        return this.frontendUserIssuePutWithHttpInfo(body)
            .then(function(response_and_data) {
                return response_and_data.data;
            });
    }


    /**
     * BCorrespondent api
     * @param {Array.<Number>} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Response} and HTTP response
     */
    frontendUserNotificationPostWithHttpInfo(body) {
        let postBody = body;
        // verify the required parameter 'body' is set
        if (body === undefined || body === null) {
            throw new Error("Missing the required parameter 'body' when calling frontendUserNotificationPost");
        }

        let pathParams = {};
        let queryParams = {};
        let headerParams = {};
        let formParams = {};

        let authNames = ['JwtSecurity'];
        let contentTypes = ['application/json;charset=utf-8'];
        let accepts = ['application/json;charset=utf-8'];
        let returnType = Response;
        return this.apiClient.callApi(
            '/frontend/user/notification', 'POST',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, null
        );
    }

    /**
     * BCorrespondent api
     * @param {Array.<Number>} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Response}
     */
    frontendUserNotificationPost(body) {
        return this.frontendUserNotificationPostWithHttpInfo(body)
            .then(function(response_and_data) {
                return response_and_data.data;
            });
    }


    /**
     * BCorrespondent api
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ResponseNotifications} and HTTP response
     */
    frontendUserNotificationsGetWithHttpInfo() {
        let postBody = null;

        let pathParams = {};
        let queryParams = {};
        let headerParams = {};
        let formParams = {};

        let authNames = ['JwtSecurity'];
        let contentTypes = [];
        let accepts = ['application/json;charset=utf-8'];
        let returnType = ResponseNotifications;
        return this.apiClient.callApi(
            '/frontend/user/notifications', 'GET',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, null
        );
    }

    /**
     * BCorrespondent api
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ResponseNotifications}
     */
    frontendUserNotificationsGet() {
        return this.frontendUserNotificationsGetWithHttpInfo()
            .then(function(response_and_data) {
                return response_and_data.data;
            });
    }


    /**
     * BCorrespondent api
     * @param {module:model/ProcuratoryRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Response} and HTTP response
     */
    frontendUserProcuratoryPutWithHttpInfo(body) {
        let postBody = body;
        // verify the required parameter 'body' is set
        if (body === undefined || body === null) {
            throw new Error("Missing the required parameter 'body' when calling frontendUserProcuratoryPut");
        }

        let pathParams = {};
        let queryParams = {};
        let headerParams = {};
        let formParams = {};

        let authNames = ['JwtSecurity'];
        let contentTypes = ['application/json;charset=utf-8'];
        let accepts = ['application/json;charset=utf-8'];
        let returnType = Response;
        return this.apiClient.callApi(
            '/frontend/user/procuratory', 'PUT',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, null
        );
    }

    /**
     * BCorrespondent api
     * @param {module:model/ProcuratoryRequest} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Response}
     */
    frontendUserProcuratoryPut(body) {
        return this.frontendUserProcuratoryPutWithHttpInfo(body)
            .then(function(response_and_data) {
                return response_and_data.data;
            });
    }


    /**
     * BCorrespondent api
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ResponseWorkspace} and HTTP response
     */
    frontendUserWorkspaceGetWithHttpInfo() {
        let postBody = null;

        let pathParams = {};
        let queryParams = {};
        let headerParams = {};
        let formParams = {};

        let authNames = ['JwtSecurity'];
        let contentTypes = [];
        let accepts = ['application/json;charset=utf-8'];
        let returnType = ResponseWorkspace;
        return this.apiClient.callApi(
            '/frontend/user/workspace', 'GET',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, null
        );
    }

    /**
     * BCorrespondent api
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ResponseWorkspace}
     */
    frontendUserWorkspaceGet() {
        return this.frontendUserWorkspaceGetWithHttpInfo()
            .then(function(response_and_data) {
                return response_and_data.data;
            });
    }


}