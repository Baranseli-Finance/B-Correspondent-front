/**
 * BCorrespondent. Tag (-). Commit (bb65df7)
 * BCorrespondent server api
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: fclaw007@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AuthCode from '../model/AuthCode';
import Credentials from '../model/Credentials';
import NewPassword from '../model/NewPassword';
import ResendCode from '../model/ResendCode';
import Response from '../model/Response';
import ResponseAuthCodeHash from '../model/ResponseAuthCodeHash';
import ResponseAuthToken from '../model/ResponseAuthToken';
import ResponseBool from '../model/ResponseBool';
import ResponseMaybeInt64 from '../model/ResponseMaybeInt64';

/**
 * Auth service.
 * @module api/AuthApi
 * @version 1.2.1
 */
export default class AuthApi {

    /**
     * Constructs a new AuthApi. 
     * @alias module:api/AuthApi
     * @class
     * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
     * default to {@link module:ApiClient#instance} if unspecified.
     */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * BCorrespondent api
     * @param {module:model/Credentials} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ResponseAuthCodeHash} and HTTP response
     */
    authCodePutWithHttpInfo(body) {
        let postBody = body;
        // verify the required parameter 'body' is set
        if (body === undefined || body === null) {
            throw new Error("Missing the required parameter 'body' when calling authCodePut");
        }

        let pathParams = {};
        let queryParams = {};
        let headerParams = {};
        let formParams = {};

        let authNames = [];
        let contentTypes = ['application/json;charset=utf-8'];
        let accepts = ['application/json;charset=utf-8'];
        let returnType = ResponseAuthCodeHash;
        return this.apiClient.callApi(
            '/auth/code', 'PUT',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, null
        );
    }

    /**
     * BCorrespondent api
     * @param {module:model/Credentials} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ResponseAuthCodeHash}
     */
    authCodePut(body) {
        return this.authCodePutWithHttpInfo(body)
            .then(function(response_and_data) {
                return response_and_data.data;
            });
    }


    /**
     * BCorrespondent api
     * @param {module:model/ResendCode} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ResponseAuthCodeHash} and HTTP response
     */
    authCodeResendPutWithHttpInfo(body) {
        let postBody = body;
        // verify the required parameter 'body' is set
        if (body === undefined || body === null) {
            throw new Error("Missing the required parameter 'body' when calling authCodeResendPut");
        }

        let pathParams = {};
        let queryParams = {};
        let headerParams = {};
        let formParams = {};

        let authNames = [];
        let contentTypes = ['application/json;charset=utf-8'];
        let accepts = ['application/json;charset=utf-8'];
        let returnType = ResponseAuthCodeHash;
        return this.apiClient.callApi(
            '/auth/code/resend', 'PUT',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, null
        );
    }

    /**
     * BCorrespondent api
     * @param {module:model/ResendCode} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ResponseAuthCodeHash}
     */
    authCodeResendPut(body) {
        return this.authCodeResendPutWithHttpInfo(body)
            .then(function(response_and_data) {
                return response_and_data.data;
            });
    }


    /**
     * BCorrespondent api
     * @param {module:model/String} authType 
     * @param {module:model/AuthCode} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ResponseAuthToken} and HTTP response
     */
    authLoginAuthTypePostWithHttpInfo(authType, body) {
        let postBody = body;
        // verify the required parameter 'authType' is set
        if (authType === undefined || authType === null) {
            throw new Error("Missing the required parameter 'authType' when calling authLoginAuthTypePost");
        }
        // verify the required parameter 'body' is set
        if (body === undefined || body === null) {
            throw new Error("Missing the required parameter 'body' when calling authLoginAuthTypePost");
        }

        let pathParams = {
            'auth_type': authType
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};

        let authNames = [];
        let contentTypes = ['application/json;charset=utf-8'];
        let accepts = ['application/json;charset=utf-8'];
        let returnType = ResponseAuthToken;
        return this.apiClient.callApi(
            '/auth/login/{auth_type}', 'POST',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, null
        );
    }

    /**
     * BCorrespondent api
     * @param {module:model/String} authType 
     * @param {module:model/AuthCode} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ResponseAuthToken}
     */
    authLoginAuthTypePost(authType, body) {
        return this.authLoginAuthTypePostWithHttpInfo(authType, body)
            .then(function(response_and_data) {
                return response_and_data.data;
            });
    }


    /**
     * BCorrespondent api
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Response} and HTTP response
     */
    authLogoutPostWithHttpInfo() {
        let postBody = null;

        let pathParams = {};
        let queryParams = {};
        let headerParams = {};
        let formParams = {};

        let authNames = ['JwtSecurity'];
        let contentTypes = [];
        let accepts = ['application/json;charset=utf-8'];
        let returnType = Response;
        return this.apiClient.callApi(
            '/auth/logout', 'POST',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, null
        );
    }

    /**
     * BCorrespondent api
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Response}
     */
    authLogoutPost() {
        return this.authLogoutPostWithHttpInfo()
            .then(function(response_and_data) {
                return response_and_data.data;
            });
    }


    /**
     * BCorrespondent api
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ResponseMaybeInt64} and HTTP response
     */
    authPasswordResetLinkPutWithHttpInfo() {
        let postBody = null;

        let pathParams = {};
        let queryParams = {};
        let headerParams = {};
        let formParams = {};

        let authNames = ['JwtSecurity'];
        let contentTypes = [];
        let accepts = ['application/json;charset=utf-8'];
        let returnType = ResponseMaybeInt64;
        return this.apiClient.callApi(
            '/auth/password/reset/link', 'PUT',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, null
        );
    }

    /**
     * BCorrespondent api
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ResponseMaybeInt64}
     */
    authPasswordResetLinkPut() {
        return this.authPasswordResetLinkPutWithHttpInfo()
            .then(function(response_and_data) {
                return response_and_data.data;
            });
    }


    /**
     * BCorrespondent api
     * @param {module:model/NewPassword} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ResponseBool} and HTTP response
     */
    authPasswordResetPostWithHttpInfo(body) {
        let postBody = body;
        // verify the required parameter 'body' is set
        if (body === undefined || body === null) {
            throw new Error("Missing the required parameter 'body' when calling authPasswordResetPost");
        }

        let pathParams = {};
        let queryParams = {};
        let headerParams = {};
        let formParams = {};

        let authNames = ['JwtSecurity'];
        let contentTypes = ['application/json;charset=utf-8'];
        let accepts = ['application/json;charset=utf-8'];
        let returnType = ResponseBool;
        return this.apiClient.callApi(
            '/auth/password/reset', 'POST',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, null
        );
    }

    /**
     * BCorrespondent api
     * @param {module:model/NewPassword} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ResponseBool}
     */
    authPasswordResetPost(body) {
        return this.authPasswordResetPostWithHttpInfo(body)
            .then(function(response_and_data) {
                return response_and_data.data;
            });
    }


    /**
     * BCorrespondent api
     * @param {String} key 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ResponseAuthToken} and HTTP response
     */
    authTokenGenerateKeyPostWithHttpInfo(key) {
        let postBody = null;
        // verify the required parameter 'key' is set
        if (key === undefined || key === null) {
            throw new Error("Missing the required parameter 'key' when calling authTokenGenerateKeyPost");
        }

        let pathParams = {
            'key': key
        };
        let queryParams = {};
        let headerParams = {};
        let formParams = {};

        let authNames = [];
        let contentTypes = [];
        let accepts = ['application/json;charset=utf-8'];
        let returnType = ResponseAuthToken;
        return this.apiClient.callApi(
            '/auth/token/generate/{key}', 'POST',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, null
        );
    }

    /**
     * BCorrespondent api
     * @param {String} key 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ResponseAuthToken}
     */
    authTokenGenerateKeyPost(key) {
        return this.authTokenGenerateKeyPostWithHttpInfo(key)
            .then(function(response_and_data) {
                return response_and_data.data;
            });
    }


}