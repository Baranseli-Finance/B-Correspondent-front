/**
 * BCorrespondent. Tag (-). Commit (bb65df7)
 * BCorrespondent server api
 *
 * The version of the OpenAPI document: 1.2.1
 * Contact: fclaw007@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import InvoiceRegisterRequest from '../model/InvoiceRegisterRequest';
import Response from '../model/Response';
import ResponseInitWithdrawal from '../model/ResponseInitWithdrawal';
import ResponseInvoiceRegisterResponse from '../model/ResponseInvoiceRegisterResponse';
import ResponseMaybeWithdrawalHistory from '../model/ResponseMaybeWithdrawalHistory';
import ResponseWithdrawResult from '../model/ResponseWithdrawResult';
import Withdraw from '../model/Withdraw';

/**
 * Institution service.
 * @module api/InstitutionApi
 * @version 1.2.1
 */
export default class InstitutionApi {

    /**
     * Constructs a new InstitutionApi. 
     * @alias module:api/InstitutionApi
     * @class
     * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
     * default to {@link module:ApiClient#instance} if unspecified.
     */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * BCorrespondent api
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Response} and HTTP response
     */
    institutionFiatTransactionOrderPostWithHttpInfo() {
        let postBody = null;

        let pathParams = {};
        let queryParams = {};
        let headerParams = {};
        let formParams = {};

        let authNames = ['JwtSecurity'];
        let contentTypes = [];
        let accepts = ['application/json;charset=utf-8'];
        let returnType = Response;
        return this.apiClient.callApi(
            '/institution/fiat/transaction/order', 'POST',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, null
        );
    }

    /**
     * BCorrespondent api
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Response}
     */
    institutionFiatTransactionOrderPost() {
        return this.institutionFiatTransactionOrderPostWithHttpInfo()
            .then(function(response_and_data) {
                return response_and_data.data;
            });
    }


    /**
     * BCorrespondent api
     * @param {Number} page 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ResponseMaybeWithdrawalHistory} and HTTP response
     */
    institutionFiatWithdrawHistoryPageGetWithHttpInfo(page) {
        let postBody = null;
        // verify the required parameter 'page' is set
        if (page === undefined || page === null) {
            throw new Error("Missing the required parameter 'page' when calling institutionFiatWithdrawHistoryPageGet");
        }

        let pathParams = {};
        let queryParams = {
            'page': page
        };
        let headerParams = {};
        let formParams = {};

        let authNames = ['JwtSecurity'];
        let contentTypes = [];
        let accepts = ['application/json;charset=utf-8'];
        let returnType = ResponseMaybeWithdrawalHistory;
        return this.apiClient.callApi(
            '/institution/fiat/withdraw/history/page', 'GET',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, null
        );
    }

    /**
     * BCorrespondent api
     * @param {Number} page 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ResponseMaybeWithdrawalHistory}
     */
    institutionFiatWithdrawHistoryPageGet(page) {
        return this.institutionFiatWithdrawHistoryPageGetWithHttpInfo(page)
            .then(function(response_and_data) {
                return response_and_data.data;
            });
    }


    /**
     * BCorrespondent api
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ResponseInitWithdrawal} and HTTP response
     */
    institutionFiatWithdrawInitGetWithHttpInfo() {
        let postBody = null;

        let pathParams = {};
        let queryParams = {};
        let headerParams = {};
        let formParams = {};

        let authNames = ['JwtSecurity'];
        let contentTypes = [];
        let accepts = ['application/json;charset=utf-8'];
        let returnType = ResponseInitWithdrawal;
        return this.apiClient.callApi(
            '/institution/fiat/withdraw/init', 'GET',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, null
        );
    }

    /**
     * BCorrespondent api
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ResponseInitWithdrawal}
     */
    institutionFiatWithdrawInitGet() {
        return this.institutionFiatWithdrawInitGetWithHttpInfo()
            .then(function(response_and_data) {
                return response_and_data.data;
            });
    }


    /**
     * BCorrespondent api
     * @param {module:model/Withdraw} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ResponseWithdrawResult} and HTTP response
     */
    institutionFiatWithdrawPutWithHttpInfo(body) {
        let postBody = body;
        // verify the required parameter 'body' is set
        if (body === undefined || body === null) {
            throw new Error("Missing the required parameter 'body' when calling institutionFiatWithdrawPut");
        }

        let pathParams = {};
        let queryParams = {};
        let headerParams = {};
        let formParams = {};

        let authNames = ['JwtSecurity'];
        let contentTypes = ['application/json;charset=utf-8'];
        let accepts = ['application/json;charset=utf-8'];
        let returnType = ResponseWithdrawResult;
        return this.apiClient.callApi(
            '/institution/fiat/withdraw', 'PUT',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, null
        );
    }

    /**
     * BCorrespondent api
     * @param {module:model/Withdraw} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ResponseWithdrawResult}
     */
    institutionFiatWithdrawPut(body) {
        return this.institutionFiatWithdrawPutWithHttpInfo(body)
            .then(function(response_and_data) {
                return response_and_data.data;
            });
    }


    /**
     * BCorrespondent api
     * @param {Array.<module:model/InvoiceRegisterRequest>} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ResponseInvoiceRegisterResponse} and HTTP response
     */
    institutionInvoiceRegisterPutWithHttpInfo(body) {
        let postBody = body;
        // verify the required parameter 'body' is set
        if (body === undefined || body === null) {
            throw new Error("Missing the required parameter 'body' when calling institutionInvoiceRegisterPut");
        }

        let pathParams = {};
        let queryParams = {};
        let headerParams = {};
        let formParams = {};

        let authNames = ['JwtSecurity'];
        let contentTypes = ['application/json;charset=utf-8'];
        let accepts = ['application/json;charset=utf-8'];
        let returnType = ResponseInvoiceRegisterResponse;
        return this.apiClient.callApi(
            '/institution/invoice/register', 'PUT',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, null
        );
    }

    /**
     * BCorrespondent api
     * @param {Array.<module:model/InvoiceRegisterRequest>} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ResponseInvoiceRegisterResponse}
     */
    institutionInvoiceRegisterPut(body) {
        return this.institutionInvoiceRegisterPutWithHttpInfo(body)
            .then(function(response_and_data) {
                return response_and_data.data;
            });
    }


}